(()=>{"use strict";var e={265:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,n)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){const t=(e,t)=>new Promise(((r,o)=>{const n=a.window.createTerminal({name:`Flutter: ${e}`,cwd:t,shellPath:"/bin/zsh"});n.show(),n.sendText(e);const s=a.window.onDidCloseTerminal((e=>{e===n&&(s.dispose(),r())}))})),r=(e,t)=>new Promise(((r,o)=>{const n=a.window.createTerminal({name:`Flutter: ${e}`,cwd:t,shellPath:"/bin/zsh"});n.show(),n.sendText(e);const s=a.window.onDidCloseTerminal((e=>{e===n&&(s.dispose(),r())}));n.sendText("exit")})),o=a.workspace.workspaceFolders?.[0]?.uri.fsPath;let n=a.commands.registerCommand("flutter-cli-shortcut.flutterPubGet",(async()=>{if(o)try{await t("flutter pub get",o),a.window.showInformationMessage("Successfully ran 'flutter pub get'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub get': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),s=a.commands.registerCommand("flutter-cli-shortcut.flutterPubUpgrade",(async()=>{if(o)try{await t("flutter pub upgrade",o),a.window.showInformationMessage("Successfully ran 'flutter pub upgrade'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub upgrade': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),d=a.commands.registerCommand("flutter-cli-shortcut.flutterPubUpgradeMajorVersions",(async()=>{if(o)try{await t("flutter pub upgrade --major-versions",o),a.window.showInformationMessage("Successfully ran 'flutter pub upgrade --major-versions'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub upgrade --major-versions': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),c=a.commands.registerCommand("flutter-cli-shortcut.flutterPubOutdated",(async()=>{if(o)try{await t("flutter pub outdated",o),a.window.showInformationMessage("Successfully ran 'flutter pub outdated'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub outdated': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),u=a.commands.registerCommand("flutter-cli-shortcut.flutterPubCacheRepair",(async()=>{if(o)try{await t("flutter pub cache repair",o),a.window.showInformationMessage("Successfully ran 'flutter pub cache repair'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub cache repair': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),w=a.commands.registerCommand("flutter-cli-shortcut.flutterPubUpgradeDryRun",(async()=>{if(o)try{await t("flutter pub upgrade --dry-run",o),a.window.showInformationMessage("Successfully ran 'flutter pub upgrade --dry-run'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub upgrade --dry-run': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),p=a.commands.registerCommand("flutter-cli-shortcut.flutterPubDowngrade",(async()=>{if(o)try{await t("flutter pub downgrade",o),a.window.showInformationMessage("Successfully ran 'flutter pub downgrade'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter pub downgrade': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),f=a.commands.registerCommand("flutter-cli-shortcut.flutterPubVersion",(async()=>{if(o)try{await t("flutter --version && flutter pub version",o),a.window.showInformationMessage("Successfully ran 'flutter --version && flutter pub version'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter --version && flutter pub version': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),m=a.commands.registerCommand("flutter-cli-shortcut.flutterPubAdd",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=await a.window.showInputBox({prompt:"Enter the package name to add",placeHolder:"e.g., provider"});if(e)try{await t(`flutter pub add ${e}`,o),a.window.showInformationMessage(`Successfully ran flutter pub add ${e}.`)}catch(t){a.window.showErrorMessage(`Failed to run flutter pub add ${e}: ${t.message}`)}else a.window.showErrorMessage("Package name is required.")})),g=a.commands.registerCommand("flutter-cli-shortcut.flutterPubRemove",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=await a.window.showInputBox({prompt:"Enter the package name to remove",placeHolder:"e.g., provider"});if(e)try{await t(`flutter pub remove ${e}`,o),a.window.showInformationMessage(`Successfully ran flutter pub remove ${e}.`)}catch(t){a.window.showErrorMessage(`Failed to run flutter pub remove ${e}: ${t.message}`)}else a.window.showErrorMessage("Package name is required.")})),h=a.commands.registerCommand("flutter-cli-shortcut.flutterClean",(async()=>{if(o)try{await t("flutter clean",o),a.window.showInformationMessage("Successfully ran 'flutter clean'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter clean': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),y=a.commands.registerCommand("flutter-cli-shortcut.flutterTest",(async()=>{if(o)try{await t("flutter test",o),a.window.showInformationMessage("Successfully ran 'flutter test'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter test': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),M=a.commands.registerCommand("flutter-cli-shortcut.flutterAnalyze",(async()=>{if(o)try{await t("flutter analyze",o),a.window.showInformationMessage("Successfully ran 'flutter analyze'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter analyze': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),v=a.commands.registerCommand("flutter-cli-shortcut.flutterCreate",(async()=>{const e=await a.window.showInputBox({prompt:"Enter the name of the new Flutter project (e.g., methodist_ndwom)",placeHolder:"e.g., methodist_ndwom"});if(!e)return void a.window.showErrorMessage("Project name is required.");const r=await a.window.showInputBox({prompt:"Enter the organization identifier (e.g., com.codelytical)",placeHolder:"e.g., com.codelytical"});if(r)if(o)try{await t(`flutter create --org ${r} ${e}`,o),a.window.showInformationMessage(`Successfully ran flutter create --org ${r} ${e}`)}catch(t){a.window.showErrorMessage(`Failed to run flutter create--org ${r} ${e}: ${t.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");else a.window.showErrorMessage("Organization identifier is required.")})),b=a.commands.registerCommand("flutter-cli-shortcut.flutterCreateCodeLytical",(async()=>{const e=await a.window.showInputBox({prompt:"Enter the name of the new Flutter project (e.g., methodist_ndwom)",placeHolder:"e.g., methodist_ndwom"});if(!e)return void a.window.showErrorMessage("Project name is required.");const t=await a.window.showInputBox({prompt:"Enter the organization identifier (e.g., com.codelytical)",placeHolder:"e.g., com.codelytical"});if(t)if(o)try{await r(`flutter create --org ${t} ${e}`,o);const n=i.join(o,e);["app/routes","app/theme","mixins","services/local","services/network","utils","controllers/sample","models","ui/screens","ui/widgets"].forEach((e=>{const t=i.join(n,"lib",e);l.mkdirSync(t,{recursive:!0})}));const s=i.join(n,"lib","main.dart");l.writeFileSync(s,"import 'app/launcher.dart' as launcher;\n\nvoid main() {\n  launcher.main();\n}\n"),await N(n,e),await r("flutter pub add provider",n);const a=i.join(n,"test","widget_test.dart");l.existsSync(a)&&l.unlinkSync(a);const d=i.join(n,"test","sample_controller_test.dart");l.writeFileSync(d,B(e))}catch(e){return void a.window.showErrorMessage(`Failed to create project: ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");else a.window.showErrorMessage("Organization identifier is required.")})),x=a.commands.registerCommand("flutter-cli-shortcut.flutterBuildApk",(async()=>{if(o)try{await t("flutter build apk",o),a.window.showInformationMessage("Successfully ran 'flutter build apk'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter build apk': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),E=a.commands.registerCommand("flutter-cli-shortcut.flutterBuildIos",(async()=>{if(o)try{await t("flutter build ios",o),a.window.showInformationMessage("Successfully ran 'flutter build ios'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter build ios': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),C=a.commands.registerCommand("flutter-cli-shortcut.flutterBuildAppBundle",(async()=>{if(o)try{await t("flutter build appbundle",o),a.window.showInformationMessage("Successfully ran 'flutter build appbundle'.")}catch(e){a.window.showErrorMessage(`Failed to run 'flutter build appbundle': ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.")})),k=a.commands.registerCommand("flutter-cli-shortcut.podInstall",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=i.join(o,"ios"),r=i.join(e,"Podfile");try{if((await a.workspace.fs.stat(a.Uri.file(e))).type!==a.FileType.Directory)return void a.window.showErrorMessage("No ios directory found. Please check your Flutter project.");try{await a.workspace.fs.stat(a.Uri.file(r));try{await t("cd ios && pod install",o),a.window.showInformationMessage("Pods installed successfully!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}catch{try{await t("cd ios && pod init && pod install",o),a.window.showInformationMessage("Pods initialized and installed!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}}catch{a.window.showErrorMessage("No ios directory found. Please check your Flutter project.")}})),S=a.commands.registerCommand("flutter-cli-shortcut.podInstallWithRepoUpdate",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=i.join(o,"ios"),r=i.join(e,"Podfile");try{if((await a.workspace.fs.stat(a.Uri.file(e))).type!==a.FileType.Directory)return void a.window.showErrorMessage("No ios directory found. Please check your Flutter project.");try{await a.workspace.fs.stat(a.Uri.file(r));try{await t("cd ios && pod install --repo-update",o),a.window.showInformationMessage("Pods installed with repo update!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}catch{try{await t("cd ios && pod init && pod install --repo-update",o),a.window.showInformationMessage("Pods initialized and installed with repo update!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}}catch{a.window.showErrorMessage("No ios directory found. Please check your Flutter project.")}})),F=a.commands.registerCommand("flutter-cli-shortcut.podUpdate",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=i.join(o,"ios"),r=i.join(e,"Podfile");try{if((await a.workspace.fs.stat(a.Uri.file(e))).type!==a.FileType.Directory)return void a.window.showErrorMessage("No ios directory found. Please check your Flutter project.");try{await a.workspace.fs.stat(a.Uri.file(r));try{await t("cd ios && pod update",o),a.window.showInformationMessage("Pods updated successfully!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}catch{try{await t("cd ios && pod init && pod update",o),a.window.showInformationMessage("Pods initialized and updated!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}}catch{a.window.showErrorMessage("No ios directory found. Please check your Flutter project.")}})),P=a.commands.registerCommand("flutter-cli-shortcut.podRepoUpdate",(async()=>{if(!o)return void a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");const e=i.join(o,"ios"),r=i.join(e,"Podfile");try{if((await a.workspace.fs.stat(a.Uri.file(e))).type!==a.FileType.Directory)return void a.window.showErrorMessage("No ios directory found. Please check your Flutter project.");try{await a.workspace.fs.stat(a.Uri.file(r));try{await t("cd ios && pod repo update",o),a.window.showInformationMessage("Repo updated successfully!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}catch{try{await t("cd ios && pod init && pod repo update",o),a.window.showInformationMessage("Repo initialized and updated!")}catch(e){a.window.showErrorMessage(`Error: ${e.message}`)}}}catch{a.window.showErrorMessage("No ios directory found. Please check your Flutter project.")}})),j=a.commands.registerCommand("flutter-cli-shortcut.flutterCreateCodeLyticalRiverpod",(async()=>{const e=await a.window.showInputBox({prompt:"Enter the name of the new Flutter project (e.g., methodist_ndwom)",placeHolder:"e.g., methodist_ndwom"});if(!e)return void a.window.showErrorMessage("Project name is required.");const t=await a.window.showInputBox({prompt:"Enter the organization identifier (e.g., com.codelytical)",placeHolder:"e.g., com.codelytical"});if(t)if(o)try{await r(`flutter create --org ${t} ${e}`,o);const n=i.join(o,e);["core","core/router","core/theme","features/home","features/home/view","features/home/viewmodel","features/home/model","services/local","services/network"].forEach((e=>{const t=i.join(n,"lib",e);l.mkdirSync(t,{recursive:!0})}));const s=i.join(n,"lib","main.dart");l.writeFileSync(s,"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'core/router/app_router.dart';\n\nvoid main() {\n  runApp(const ProviderScope(child: MyApp()));\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      routerConfig: AppRouter.router,\n    );\n  }\n}\n"),await _(n,e),await r("flutter pub add flutter_riverpod go_router",n);const a=i.join(n,"test","widget_test.dart");l.existsSync(a)&&l.unlinkSync(a);const d=i.join(n,"test","home_viewmodel_test.dart");l.writeFileSync(d,$(e))}catch(e){return void a.window.showErrorMessage(`Failed to create project: ${e.message}`)}else a.window.showErrorMessage("No workspace folder found. Please open a Flutter project folder.");else a.window.showErrorMessage("Organization identifier is required.")}));const _=async(e,t)=>{t.replace(/_/g," ").replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1))).replace(/\s/g,"");const r=i.join(e,"lib","core","router","app_router.dart");l.writeFileSync(r,"import 'package:go_router/go_router.dart';\nimport '../../features/home/view/home_view.dart';\n\nclass AppRouter {\n  static final router = GoRouter(\n    routes: [\n      GoRoute(\n        path: '/',\n        builder: (context, state) => const HomeView(),\n      ),\n    ],\n  );\n}\n");const o=i.join(e,"lib","features","home","view","home_view.dart");l.writeFileSync(o,"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport '../viewmodel/home_viewmodel.dart';\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({super.key});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final viewModel = ref.watch(homeViewModelProvider);\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Home View'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(viewModel.message, style: const TextStyle(fontSize: 20)),\n            const SizedBox(height: 20),\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 50.0),\n              child: TextField(\n                controller: viewModel.textController,\n                decoration: const InputDecoration(\n                  border: OutlineInputBorder(),\n                  labelText: 'Enter new message',\n                ),\n              ),\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () {\n                if (viewModel.textController.text.isNotEmpty) {\n                  viewModel.updateMessage(viewModel.textController.text);\n                  viewModel.textController.clear(); // Clear the TextField after updating\n                }\n              },\n              child: const Text('Update Message'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n");const n=i.join(e,"lib","features","home","viewmodel","home_viewmodel.dart");l.writeFileSync(n,"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nclass HomeViewModel extends ChangeNotifier {\n  final TextEditingController textController = TextEditingController();\n  String _message = 'Hello, Riverpod!';\n\n  String get message => _message;\n\n  void updateMessage(String newMessage) {\n    _message = newMessage;\n    notifyListeners();\n  }\n}\n\nfinal homeViewModelProvider = ChangeNotifierProvider((ref) => HomeViewModel());\n");const s=i.join(e,"lib","features","home","model","sample_model.dart");l.writeFileSync(s,"class SampleModel {\n  final String message;\n  SampleModel(this.message);\n}\n")},$=e=>`import 'package:flutter_test/flutter_test.dart';\nimport 'package:${e}/features/home/viewmodel/home_viewmodel.dart';\n\nvoid main() {\n  group('HomeViewModel', () {\n    test('initial message should be correct', () {\n      // Arrange\n      final viewModel = HomeViewModel();\n\n      // Act\n      final message = viewModel.message;\n\n      // Assert\n      expect(message, 'Hello, Riverpod!');\n    });\n\n    test('updateMessage should update the message and notify listeners', () {\n      // Arrange\n      final viewModel = HomeViewModel();\n      String? updatedMessage;\n\n      // Add a listener to check for notification\n      viewModel.addListener(() {\n        updatedMessage = viewModel.message;\n      });\n\n      // Act\n      viewModel.updateMessage('New message from Riverpod');\n\n      // Assert\n      expect(updatedMessage, 'New message from Riverpod');\n    });\n  });\n}\n`,N=async(e,t)=>{const r=t.replace(/_/g," ").replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1))).replace(/\s/g,""),o=i.join(e,"lib","app","launcher.dart");l.writeFileSync(o,`import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'provider_registry.dart';\nimport 'app.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(\n    MultiProvider(\n      providers: ProviderRegistry.registeredProviders,\n      child: const ${r}(),\n    ),\n  );\n}\n`);const n=i.join(e,"lib","app","app.dart");l.writeFileSync(n,`import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'codelytical_context_helper.dart';\nimport '../ui/screens/welcome_screen.dart';\n\nclass ${r} extends StatelessWidget {\n  const ${r}({super.key});\n  @override\n  Widget build(BuildContext context) {\n    var isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;\n    return AnnotatedRegion<SystemUiOverlayStyle>(\n      value: SystemUiOverlayStyle(\n          statusBarBrightness: !isDark ? Brightness.light : Brightness.dark,\n          statusBarColor: Colors.transparent,\n          statusBarIconBrightness: isDark ? Brightness.light : Brightness.dark),\n      child: MaterialApp(\n          navigatorKey: CodeLyticalContextHelper.mainNavigatorKey,\n          debugShowCheckedModeBanner: false,\n          title: "CodeLytical Sample",\n          themeMode: ThemeMode.light,\n          home: const WelcomeScreen(),\n      ),\n    );\n  }\n}\n`);const s=i.join(e,"lib","app","provider_registry.dart");l.writeFileSync(s,"import 'package:provider/provider.dart';\nimport 'package:provider/single_child_widget.dart';\nimport 'provider_registry_export.dart';\n\nclass ProviderRegistry {\n  static List<SingleChildWidget> get registeredProviders => [\n    ChangeNotifierProvider(create: (_) => SampleController()),\n    // Add more providers here as needed\n  ];\n}\n");const a=i.join(e,"lib","app","provider_registry_export.dart");l.writeFileSync(a,"// Exports for your controllers\nexport '../controllers/sample/sample_controller.dart';\n");const d=i.join(e,"lib","controllers","sample","sample_controller.dart");l.writeFileSync(d,"import 'package:flutter/material.dart';\n\nclass SampleController extends ChangeNotifier {\n  String _message = 'CodeLytical is a YouTube channel';\n\n  String get message => _message;\n\n  void updateMessage(String newMessage) {\n    _message = newMessage;\n    notifyListeners();\n  }\n}\n");const c=i.join(e,"lib","ui","screens","welcome_screen.dart");l.writeFileSync(c,"import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport '../../app/provider_registry_export.dart';\n\nclass WelcomeScreen extends StatelessWidget {\n  const WelcomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final sampleController = context.watch<SampleController>();\n    final TextEditingController textController = TextEditingController();\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Welcome Screen'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(sampleController.message,\n                style: const TextStyle(fontSize: 20)),\n            const SizedBox(height: 20),\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 50.0),\n              child: TextField(\n                controller: textController,\n                decoration: const InputDecoration(\n                  border: OutlineInputBorder(),\n                  labelText: 'Enter new message',\n                ),\n              ),\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () {\n                if (textController.text.isNotEmpty) {\n                  sampleController.updateMessage(textController.text);\n                  textController.clear(); // Clear the TextField after updating\n                }\n              },\n              child: const Text('Update Message'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n");const u=i.join(e,"lib","app","codelytical_context_helper.dart");l.writeFileSync(u,"import 'package:flutter/material.dart';\n\nclass CodeLyticalContextHelper {\n  CodeLyticalContextHelper._();  // Private constructor to prevent instantiation\n\n  static final GlobalKey<NavigatorState> mainNavigatorKey = GlobalKey<NavigatorState>();\n\n  static BuildContext get currentBuildContext {\n    final context = mainNavigatorKey.currentContext;\n    if (context == null) {\n      throw StateError(\"Navigator key is not associated with any context.\");\n    }\n    return context;\n  }\n}\n")},B=e=>`import 'package:${e}/controllers/sample/sample_controller.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  group('SampleController', () {\n    test('initial message should be correct', () {\n      // Arrange\n      final controller = SampleController();\n\n      // Act\n      final message = controller.message;\n\n      // Assert\n      expect(message, 'CodeLytical is a YouTube channel');\n    });\n\n    test('updateMessage should update the message and notify listeners', () {\n      // Arrange\n      final controller = SampleController();\n      String? updatedMessage;\n\n      // Add a listener to check for notification\n      controller.addListener(() {\n        updatedMessage = controller.message;\n      });\n\n      // Act\n      controller.updateMessage('New message from CodeLytical');\n\n      // Assert\n      expect(updatedMessage, 'New message from CodeLytical');\n      expect(controller.message, 'New message from CodeLytical');\n    });\n  });\n}\n`;e.subscriptions.push(n,s,d,c,u,w,p,f,m,g,h,y,M,v,b,x,E,C,k,S,F,P,j)},t.deactivate=function(){};const a=s(r(398)),i=s(r(928)),l=s(r(896))},398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={},r=function r(o){var n=t[o];if(void 0!==n)return n.exports;var s=t[o]={exports:{}};return e[o].call(s.exports,s,s.exports,r),s.exports}(265);module.exports=r})();