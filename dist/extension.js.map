{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://flutter-cli-shortcut/./src/extension.ts","webpack://flutter-cli-shortcut/external commonjs \"vscode\"","webpack://flutter-cli-shortcut/external node-commonjs \"fs\"","webpack://flutter-cli-shortcut/external node-commonjs \"path\"","webpack://flutter-cli-shortcut/webpack/bootstrap","webpack://flutter-cli-shortcut/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  const runTerminalCommand = (command: string, cwd: string) => {\n    return new Promise<void>((resolve, reject) => {\n      const terminal = vscode.window.createTerminal({\n        name: `Flutter: ${command}`,\n        cwd,\n        shellPath: \"/bin/zsh\",\n      });\n      terminal.show();\n      terminal.sendText(command);\n\n      // Listen for when the terminal is closed to indicate completion\n      const disposable = vscode.window.onDidCloseTerminal((closedTerminal) => {\n        if (closedTerminal === terminal) {\n          disposable.dispose(); // Clean up listener\n          resolve(); // Command has completed\n        }\n      });\n    });\n  };\n\n  // Helper function to run runTerminalCommandWithTimeout\n  const runTerminalCommandWithTimeout = (command: string, cwd: string) => {\n    return new Promise<void>((resolve, reject) => {\n      const terminal = vscode.window.createTerminal({\n        name: `Flutter: ${command}`,\n        cwd,\n        shellPath: \"/bin/zsh\",\n      });\n      terminal.show();\n      terminal.sendText(command);\n\n      // Listen for when the terminal is closed to indicate completion\n      const disposable = vscode.window.onDidCloseTerminal((closedTerminal) => {\n        if (closedTerminal === terminal) {\n          disposable.dispose(); // Clean up listener\n          resolve(); // Command has completed\n        }\n      });\n\n      terminal.sendText(\"exit\");\n    });\n  };\n\n  // Get the workspace folder (assuming there's only one for simplicity)\n  const workspaceFolder = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n  // Flutter commands\n  let flutterPubGet = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubGet\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter pub get\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub get'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub get': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubUpgrade = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubUpgrade\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter pub upgrade\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub upgrade'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub upgrade': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubUpgradeMajorVersions = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubUpgradeMajorVersions\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\n          \"flutter pub upgrade --major-versions\",\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub upgrade --major-versions'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub upgrade --major-versions': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubOutdated = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubOutdated\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter pub outdated\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub outdated'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub outdated': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubCacheRepair = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubCacheRepair\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter pub cache repair\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub cache repair'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub cache repair': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubUpgradeDryRun = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubUpgradeDryRun\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\n          \"flutter pub upgrade --dry-run\",\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub upgrade --dry-run'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub upgrade --dry-run': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubDowngrade = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubDowngrade\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter pub downgrade\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter pub downgrade'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter pub downgrade': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubVersion = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubVersion\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\n          \"flutter --version && flutter pub version\",\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter --version && flutter pub version'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter --version && flutter pub version': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubAdd = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubAdd\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      // Prompt for the package name\n      const packageName = await vscode.window.showInputBox({\n        prompt: \"Enter the package name to add\",\n        placeHolder: \"e.g., provider\",\n      });\n\n      if (!packageName) {\n        vscode.window.showErrorMessage(\"Package name is required.\");\n        return;\n      }\n\n      // Run the flutter pub add command\n      try {\n        await runTerminalCommand(\n          `flutter pub add ${packageName}`,\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          `Successfully ran flutter pub add ${packageName}.`\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run flutter pub add ${packageName}: ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterPubRemove = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterPubRemove\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      // Prompt for the package name\n      const packageName = await vscode.window.showInputBox({\n        prompt: \"Enter the package name to remove\",\n        placeHolder: \"e.g., provider\",\n      });\n\n      if (!packageName) {\n        vscode.window.showErrorMessage(\"Package name is required.\");\n        return;\n      }\n\n      // Run the flutter pub remove command\n      try {\n        await runTerminalCommand(\n          `flutter pub remove ${packageName}`,\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          `Successfully ran flutter pub remove ${packageName}.`\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run flutter pub remove ${packageName}: ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterClean = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterClean\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter clean\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter clean'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter clean': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterTest = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterTest\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter test\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter test'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter test': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterAnalyze = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterAnalyze\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter analyze\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter analyze'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter analyze': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterCreate = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterCreate\",\n    async () => {\n      const projectName = await vscode.window.showInputBox({\n        prompt:\n          \"Enter the name of the new Flutter project (e.g., methodist_ndwom)\",\n        placeHolder: \"e.g., methodist_ndwom\",\n      });\n\n      if (!projectName) {\n        vscode.window.showErrorMessage(\"Project name is required.\");\n        return;\n      }\n\n      const organization = await vscode.window.showInputBox({\n        prompt: \"Enter the organization identifier (e.g., com.codelytical)\",\n        placeHolder: \"e.g., com.codelytical\",\n      });\n\n      if (!organization) {\n        vscode.window.showErrorMessage(\"Organization identifier is required.\");\n        return;\n      }\n\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\n          `flutter create --org ${organization} ${projectName}`,\n          workspaceFolder\n        );\n        vscode.window.showInformationMessage(\n          `Successfully ran flutter create --org ${organization} ${projectName}`\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run flutter create--org ${organization} ${projectName}: ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterCreateCodeLytical = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterCreateCodeLytical\",\n    async () => {\n      const projectName = await vscode.window.showInputBox({\n        prompt:\n          \"Enter the name of the new Flutter project (e.g., methodist_ndwom)\",\n        placeHolder: \"e.g., methodist_ndwom\",\n      });\n\n      if (!projectName) {\n        vscode.window.showErrorMessage(\"Project name is required.\");\n        return;\n      }\n\n      const organization = await vscode.window.showInputBox({\n        prompt: \"Enter the organization identifier (e.g., com.codelytical)\",\n        placeHolder: \"e.g., com.codelytical\",\n      });\n\n      if (!organization) {\n        vscode.window.showErrorMessage(\"Organization identifier is required.\");\n        return;\n      }\n\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      // Create the Flutter project\n      try {\n        await runTerminalCommandWithTimeout(\n          `flutter create --org ${organization} ${projectName}`,\n          workspaceFolder\n        );\n\n        // Define the project structure\n        const projectPath = path.join(workspaceFolder, projectName);\n        const folders = [\n          \"app/routes\",\n          \"app/theme\",\n          \"mixins\",\n          \"services/local\",\n          \"services/network\",\n          \"utils\",\n          \"controllers/sample\",\n          \"models\",\n          \"ui/screens\",\n          \"ui/widgets\",\n        ];\n\n        // Create the folder structure\n        folders.forEach((folder) => {\n          const dirPath = path.join(projectPath, \"lib\", folder);\n          fs.mkdirSync(dirPath, { recursive: true });\n        });\n\n        // Populate main.dart\n        const mainFile = path.join(projectPath, \"lib\", \"main.dart\");\n        fs.writeFileSync(\n          mainFile,\n          `import 'app/launcher.dart' as launcher;\\n\\nvoid main() {\\n  launcher.main();\\n}\\n`\n        );\n\n        // Create additional files\n        await createProjectFiles(projectPath, projectName);\n\n        // Add provider dependency using flutter pub add\n        await runTerminalCommandWithTimeout(\n          `flutter pub add provider`,\n          projectPath\n        );\n\n        // Remove the default test file\n        const defaultTestFile = path.join(\n          projectPath,\n          \"test\",\n          \"widget_test.dart\"\n        );\n        if (fs.existsSync(defaultTestFile)) {\n          fs.unlinkSync(defaultTestFile); // Delete the default widget_test.dart\n        }\n\n        // Add custom test for SampleController\n        const sampleControllerTestFile = path.join(\n          projectPath,\n          \"test\",\n          \"sample_controller_test.dart\"\n        );\n        fs.writeFileSync(\n          sampleControllerTestFile,\n          getSampleControllerTestTemplate(projectName)\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to create project: ${error.message}`\n        );\n        return;\n      }\n    }\n  );\n\n  let flutterBuildApk = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterBuildApk\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter build apk\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter build apk'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter build apk': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterBuildIos = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterBuildIos\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter build ios\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter build ios'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter build ios': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let flutterBuildAppBundle = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterBuildAppBundle\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      try {\n        await runTerminalCommand(\"flutter build appbundle\", workspaceFolder);\n        vscode.window.showInformationMessage(\n          \"Successfully ran 'flutter build appbundle'.\"\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to run 'flutter build appbundle': ${error.message}`\n        );\n      }\n    }\n  );\n\n  let podInstall = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.podInstall\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      const podfilePath = path.join(iosPath, \"Podfile\");\n\n      // Check if ios directory and Podfile exist\n      try {\n        const iosStat = await vscode.workspace.fs.stat(\n          vscode.Uri.file(iosPath)\n        );\n        if (iosStat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        try {\n          await vscode.workspace.fs.stat(vscode.Uri.file(podfilePath));\n          // Podfile exists, so just install\n          try {\n            await runTerminalCommand(\"cd ios && pod install\", workspaceFolder);\n            vscode.window.showInformationMessage(\n              \"Pods installed successfully!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        } catch {\n          // Podfile doesn't exist, initialize pods first\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod init && pod install\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\n              \"Pods initialized and installed!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        }\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podInstallWithRepoUpdate = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.podInstallWithRepoUpdate\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      const podfilePath = path.join(iosPath, \"Podfile\");\n\n      // Check if ios directory and Podfile exist\n      try {\n        const iosStat = await vscode.workspace.fs.stat(\n          vscode.Uri.file(iosPath)\n        );\n        if (iosStat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        try {\n          await vscode.workspace.fs.stat(vscode.Uri.file(podfilePath));\n          // Podfile exists, so just install with repo update\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod install --repo-update\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\n              \"Pods installed with repo update!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        } catch {\n          // Podfile doesn't exist, initialize pods first\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod init && pod install --repo-update\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\n              \"Pods initialized and installed with repo update!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        }\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podUpdate = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.podUpdate\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      const podfilePath = path.join(iosPath, \"Podfile\");\n\n      // Check if ios directory and Podfile exist\n      try {\n        const iosStat = await vscode.workspace.fs.stat(\n          vscode.Uri.file(iosPath)\n        );\n        if (iosStat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        try {\n          await vscode.workspace.fs.stat(vscode.Uri.file(podfilePath));\n          // Podfile exists, so just update pods\n          try {\n            await runTerminalCommand(\"cd ios && pod update\", workspaceFolder);\n            vscode.window.showInformationMessage(\"Pods updated successfully!\");\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        } catch {\n          // Podfile doesn't exist, initialize pods first\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod init && pod update\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\n              \"Pods initialized and updated!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        }\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podRepoUpdate = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.podRepoUpdate\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      const podfilePath = path.join(iosPath, \"Podfile\");\n\n      // Check if ios directory and Podfile exist\n      try {\n        const iosStat = await vscode.workspace.fs.stat(\n          vscode.Uri.file(iosPath)\n        );\n        if (iosStat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        try {\n          await vscode.workspace.fs.stat(vscode.Uri.file(podfilePath));\n          // Podfile exists, so just run the repo update\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod repo update\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\"Repo updated successfully!\");\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        } catch {\n          // Podfile doesn't exist, initialize pods first\n          try {\n            await runTerminalCommand(\n              \"cd ios && pod init && pod repo update\",\n              workspaceFolder\n            );\n            vscode.window.showInformationMessage(\n              \"Repo initialized and updated!\"\n            );\n          } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n          }\n        }\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let flutterCreateCodeLyticalRiverpod = vscode.commands.registerCommand(\n    \"flutter-cli-shortcut.flutterCreateCodeLyticalRiverpod\",\n    async () => {\n      const projectName = await vscode.window.showInputBox({\n        prompt:\n          \"Enter the name of the new Flutter project (e.g., methodist_ndwom)\",\n        placeHolder: \"e.g., methodist_ndwom\",\n      });\n\n      if (!projectName) {\n        vscode.window.showErrorMessage(\"Project name is required.\");\n        return;\n      }\n\n      const organization = await vscode.window.showInputBox({\n        prompt: \"Enter the organization identifier (e.g., com.codelytical)\",\n        placeHolder: \"e.g., com.codelytical\",\n      });\n\n      if (!organization) {\n        vscode.window.showErrorMessage(\"Organization identifier is required.\");\n        return;\n      }\n\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      // Create the Flutter project\n      try {\n        await runTerminalCommandWithTimeout(\n          `flutter create --org ${organization} ${projectName}`,\n          workspaceFolder\n        );\n\n        // Define the project structure\n        const projectPath = path.join(workspaceFolder, projectName);\n        const folders = [\n          \"core\",\n          \"core/router\",\n          \"core/theme\",\n          \"features/home\",\n          \"features/home/view\",\n          \"features/home/viewmodel\",\n          \"features/home/model\",\n          \"services/local\",\n          \"services/network\",\n        ];\n\n        // Create the folder structure\n        folders.forEach((folder) => {\n          const dirPath = path.join(projectPath, \"lib\", folder);\n          fs.mkdirSync(dirPath, { recursive: true });\n        });\n\n        // Populate main.dart\n        const mainFile = path.join(projectPath, \"lib\", \"main.dart\");\n        fs.writeFileSync(\n          mainFile,\n          `import 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\nimport 'core/router/app_router.dart';\\n\\nvoid main() {\\n  runApp(const ProviderScope(child: MyApp()));\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({super.key});\\n\\n @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp.router(\\n      title: 'Flutter Demo',\\n      theme: ThemeData(\\n        primarySwatch: Colors.blue,\\n      ),\\n      routerConfig: AppRouter.router,\\n    );\\n  }\\n}\\n`\n        );\n\n        // Create additional files\n        await createRiverPodProjectFiles(projectPath, projectName);\n\n        // Add riverpod and go_router dependencies using flutter pub add\n        await runTerminalCommandWithTimeout(\n          `flutter pub add flutter_riverpod go_router`,\n          projectPath\n        );\n\n        // Remove the default test file\n        const defaultTestFile = path.join(\n          projectPath,\n          \"test\",\n          \"widget_test.dart\"\n        );\n        if (fs.existsSync(defaultTestFile)) {\n          fs.unlinkSync(defaultTestFile); // Delete the default widget_test.dart\n        }\n\n        // Add custom test for HomeViewModel\n        const homeViewModelTestFile = path.join(\n          projectPath,\n          \"test\",\n          \"home_viewmodel_test.dart\"\n        );\n        fs.writeFileSync(\n          homeViewModelTestFile,\n          getHomeViewModelTestTemplate(projectName)\n        );\n      } catch (error: any) {\n        vscode.window.showErrorMessage(\n          `Failed to create project: ${error.message}`\n        );\n        return;\n      }\n    }\n  );\n\n  // Helper function to create necessary project files\n  const createRiverPodProjectFiles = async (\n    projectPath: string,\n    projectName: string\n  ) => {\n    const appClassName = projectName\n      .replace(/_/g, \" \")\n      .replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1))\n      .replace(/\\s/g, \"\");\n\n    // Create core/router/app_router.dart\n    const appRouterFile = path.join(\n      projectPath,\n      \"lib\",\n      \"core\",\n      \"router\",\n      \"app_router.dart\"\n    );\n    fs.writeFileSync(\n      appRouterFile,\n      `import 'package:go_router/go_router.dart';\\nimport '../../features/home/view/home_view.dart';\\n\\nclass AppRouter {\\n  static final router = GoRouter(\\n    routes: [\\n      GoRoute(\\n        path: '/',\\n        builder: (context, state) => const HomeView(),\\n      ),\\n    ],\\n  );\\n}\\n`\n    );\n\n    // Create features/home/view/home_view.dart\n    const homeViewFile = path.join(\n      projectPath,\n      \"lib\",\n      \"features\",\n      \"home\",\n      \"view\",\n      \"home_view.dart\"\n    );\n    fs.writeFileSync(\n      homeViewFile,\n      `import 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\nimport '../viewmodel/home_viewmodel.dart';\\n\\nclass HomeView extends ConsumerWidget {\\n  const HomeView({super.key});\\n\\n  @override\\n  Widget build(BuildContext context, WidgetRef ref) {\\n    final viewModel = ref.watch(homeViewModelProvider);\\n\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text('Home View'),\\n      ),\\n      body: Center(\\n        child: Column(\\n          mainAxisAlignment: MainAxisAlignment.center,\\n          children: [\\n            Text(viewModel.message, style: const TextStyle(fontSize: 20)),\\n            const SizedBox(height: 20),\\n            Padding(\\n              padding: const EdgeInsets.symmetric(horizontal: 50.0),\\n              child: TextField(\\n                controller: viewModel.textController,\\n                decoration: const InputDecoration(\\n                  border: OutlineInputBorder(),\\n                  labelText: 'Enter new message',\\n                ),\\n              ),\\n            ),\\n            const SizedBox(height: 20),\\n            ElevatedButton(\\n              onPressed: () {\\n                if (viewModel.textController.text.isNotEmpty) {\\n                  viewModel.updateMessage(viewModel.textController.text);\\n                  viewModel.textController.clear(); // Clear the TextField after updating\\n                }\\n              },\\n              child: const Text('Update Message'),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n`\n    );\n\n    // Create features/home/viewmodel/home_viewmodel.dart\n    const homeViewModelFile = path.join(\n      projectPath,\n      \"lib\",\n      \"features\",\n      \"home\",\n      \"viewmodel\",\n      \"home_viewmodel.dart\"\n    );\n    fs.writeFileSync(\n      homeViewModelFile,\n      `import 'package:flutter/material.dart';\\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\\n\\nclass HomeViewModel extends ChangeNotifier {\\n  final TextEditingController textController = TextEditingController();\\n  String _message = 'Hello, Riverpod!';\\n\\n  String get message => _message;\\n\\n  void updateMessage(String newMessage) {\\n    _message = newMessage;\\n    notifyListeners();\\n  }\\n}\\n\\nfinal homeViewModelProvider = ChangeNotifierProvider((ref) => HomeViewModel());\\n`\n    );\n\n    // Create features/home/model/sample_model.dart\n    const sampleModelFile = path.join(\n      projectPath,\n      \"lib\",\n      \"features\",\n      \"home\",\n      \"model\",\n      \"sample_model.dart\"\n    );\n    fs.writeFileSync(\n      sampleModelFile,\n      `class SampleModel {\\n  final String message;\\n  SampleModel(this.message);\\n}\\n`\n    );\n  };\n\n  // Helper function to create HomeViewModel test\n  const getHomeViewModelTestTemplate = (projectName: string) => {\n    return (\n      `import 'package:flutter_test/flutter_test.dart';\\n` +\n      `import 'package:${projectName}/features/home/viewmodel/home_viewmodel.dart';\\n\\n` +\n      `void main() {\\n` +\n      `  group('HomeViewModel', () {\\n` +\n      `    test('initial message should be correct', () {\\n` +\n      `      // Arrange\\n` +\n      `      final viewModel = HomeViewModel();\\n\\n` +\n      `      // Act\\n` +\n      `      final message = viewModel.message;\\n\\n` +\n      `      // Assert\\n` +\n      `      expect(message, 'Hello, Riverpod!');\\n` +\n      `    });\\n\\n` +\n      `    test('updateMessage should update the message and notify listeners', () {\\n` +\n      `      // Arrange\\n` +\n      `      final viewModel = HomeViewModel();\\n` +\n      `      String? updatedMessage;\\n\\n` +\n      `      // Add a listener to check for notification\\n` +\n      `      viewModel.addListener(() {\\n` +\n      `        updatedMessage = viewModel.message;\\n` +\n      `      });\\n\\n` +\n      `      // Act\\n` +\n      `      viewModel.updateMessage('New message from Riverpod');\\n\\n` +\n      `      // Assert\\n` +\n      `      expect(updatedMessage, 'New message from Riverpod');\\n` +\n      `    });\\n` +\n      `  });\\n` +\n      `}\\n`\n    );\n  };\n\n  // Helper function to create necessary project files\n  const createProjectFiles = async (\n    projectPath: string,\n    projectName: string\n  ) => {\n    const appClassName = projectName\n      .replace(/_/g, \" \")\n      .replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1))\n      .replace(/\\s/g, \"\");\n\n    const launcherFile = path.join(projectPath, \"lib\", \"app\", \"launcher.dart\");\n    fs.writeFileSync(\n      launcherFile,\n      `import 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport 'provider_registry.dart';\\nimport 'app.dart';\\n\\nvoid main() async {\\n  WidgetsFlutterBinding.ensureInitialized();\\n  runApp(\\n    MultiProvider(\\n      providers: ProviderRegistry.registeredProviders,\\n      child: const ${appClassName}(),\\n    ),\\n  );\\n}\\n`\n    );\n\n    const appFile = path.join(projectPath, \"lib\", \"app\", \"app.dart\");\n    fs.writeFileSync(\n      appFile,\n      `import 'package:flutter/material.dart';\\nimport 'package:flutter/services.dart';\\nimport 'codelytical_context_helper.dart';\\nimport '../ui/screens/welcome_screen.dart';\\n\\nclass ${appClassName} extends StatelessWidget {\\n  const ${appClassName}({super.key});\\n  @override\\n  Widget build(BuildContext context) {\\n    var isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;\\n    return AnnotatedRegion<SystemUiOverlayStyle>(\\n      value: SystemUiOverlayStyle(\\n          statusBarBrightness: !isDark ? Brightness.light : Brightness.dark,\\n          statusBarColor: Colors.transparent,\\n          statusBarIconBrightness: isDark ? Brightness.light : Brightness.dark),\\n      child: MaterialApp(\\n          navigatorKey: CodeLyticalContextHelper.mainNavigatorKey,\\n          debugShowCheckedModeBanner: false,\\n          title: \"CodeLytical Sample\",\\n          themeMode: ThemeMode.light,\\n          home: const WelcomeScreen(),\\n      ),\\n    );\\n  }\\n}\\n`\n    );\n\n    // Create app/provider_registry.dart\n    const providersFile = path.join(\n      projectPath,\n      \"lib\",\n      \"app\",\n      \"provider_registry.dart\"\n    );\n    fs.writeFileSync(\n      providersFile,\n      `import 'package:provider/provider.dart';\\nimport 'package:provider/single_child_widget.dart';\\nimport 'provider_registry_export.dart';\\n\\nclass ProviderRegistry {\\n  static List<SingleChildWidget> get registeredProviders => [\\n    ChangeNotifierProvider(create: (_) => SampleController()),\\n    // Add more providers here as needed\\n  ];\\n}\\n`\n    );\n\n    // Create app/provider_registry_export.dart\n    const providersExportFile = path.join(\n      projectPath,\n      \"lib\",\n      \"app\",\n      \"provider_registry_export.dart\"\n    );\n    fs.writeFileSync(\n      providersExportFile,\n      `// Exports for your controllers\\nexport '../controllers/sample/sample_controller.dart';\\n`\n    );\n\n    // Create controllers/sample/sample_controller.dart\n    const sampleControllerFile = path.join(\n      projectPath,\n      \"lib\",\n      \"controllers\",\n      \"sample\",\n      \"sample_controller.dart\"\n    );\n    fs.writeFileSync(\n      sampleControllerFile,\n      `import 'package:flutter/material.dart';\\n\\nclass SampleController extends ChangeNotifier {\\n  String _message = 'CodeLytical is a YouTube channel';\\n\\n  String get message => _message;\\n\\n  void updateMessage(String newMessage) {\\n    _message = newMessage;\\n    notifyListeners();\\n  }\\n}\\n`\n    );\n\n    // Create ui/screens/welcome_screen.dart\n    const welcomeScreenFile = path.join(\n      projectPath,\n      \"lib\",\n      \"ui\",\n      \"screens\",\n      \"welcome_screen.dart\"\n    );\n    fs.writeFileSync(\n      welcomeScreenFile,\n      `import 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport '../../app/provider_registry_export.dart';\\n\\nclass WelcomeScreen extends StatelessWidget {\\n  const WelcomeScreen({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final sampleController = context.watch<SampleController>();\\n    final TextEditingController textController = TextEditingController();\\n\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text('Welcome Screen'),\\n      ),\\n      body: Center(\\n        child: Column(\\n          mainAxisAlignment: MainAxisAlignment.center,\\n          children: [\\n            Text(sampleController.message,\\n                style: const TextStyle(fontSize: 20)),\\n            const SizedBox(height: 20),\\n            Padding(\\n              padding: const EdgeInsets.symmetric(horizontal: 50.0),\\n              child: TextField(\\n                controller: textController,\\n                decoration: const InputDecoration(\\n                  border: OutlineInputBorder(),\\n                  labelText: 'Enter new message',\\n                ),\\n              ),\\n            ),\\n            const SizedBox(height: 20),\\n            ElevatedButton(\\n              onPressed: () {\\n                if (textController.text.isNotEmpty) {\\n                  sampleController.updateMessage(textController.text);\\n                  textController.clear(); // Clear the TextField after updating\\n                }\\n              },\\n              child: const Text('Update Message'),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n`\n    );\n\n    // Create app/codelytical_context_helper.dart\n    const contextHelperFile = path.join(\n      projectPath,\n      \"lib\",\n      \"app\",\n      \"codelytical_context_helper.dart\"\n    );\n    fs.writeFileSync(\n      contextHelperFile,\n      `import 'package:flutter/material.dart';\\n\\nclass CodeLyticalContextHelper {\\n  CodeLyticalContextHelper._();  // Private constructor to prevent instantiation\\n\\n  static final GlobalKey<NavigatorState> mainNavigatorKey = GlobalKey<NavigatorState>();\\n\\n  static BuildContext get currentBuildContext {\\n    final context = mainNavigatorKey.currentContext;\\n    if (context == null) {\\n      throw StateError(\"Navigator key is not associated with any context.\");\\n    }\\n    return context;\\n  }\\n}\\n`\n    );\n  };\n\n  // Helper function to create sample controller test\n  const getSampleControllerTestTemplate = (projectName: string) => {\n    return (\n      `import 'package:${projectName}/controllers/sample/sample_controller.dart';\\n` +\n      `import 'package:flutter_test/flutter_test.dart';\\n\\n` +\n      `void main() {\\n` +\n      `  group('SampleController', () {\\n` +\n      `    test('initial message should be correct', () {\\n` +\n      `      // Arrange\\n` +\n      `      final controller = SampleController();\\n\\n` +\n      `      // Act\\n` +\n      `      final message = controller.message;\\n\\n` +\n      `      // Assert\\n` +\n      `      expect(message, 'CodeLytical is a YouTube channel');\\n` +\n      `    });\\n\\n` +\n      `    test('updateMessage should update the message and notify listeners', () {\\n` +\n      `      // Arrange\\n` +\n      `      final controller = SampleController();\\n` +\n      `      String? updatedMessage;\\n\\n` +\n      `      // Add a listener to check for notification\\n` +\n      `      controller.addListener(() {\\n` +\n      `        updatedMessage = controller.message;\\n` +\n      `      });\\n\\n` +\n      `      // Act\\n` +\n      `      controller.updateMessage('New message from CodeLytical');\\n\\n` +\n      `      // Assert\\n` +\n      `      expect(updatedMessage, 'New message from CodeLytical');\\n` +\n      `      expect(controller.message, 'New message from CodeLytical');\\n` +\n      `    });\\n` +\n      `  });\\n` +\n      `}\\n`\n    );\n  };\n\n  context.subscriptions.push(\n    flutterPubGet,\n    flutterPubUpgrade,\n    flutterPubUpgradeMajorVersions,\n    flutterPubOutdated,\n    flutterPubCacheRepair,\n    flutterPubUpgradeDryRun,\n    flutterPubDowngrade,\n    flutterPubVersion,\n    flutterPubAdd,\n    flutterPubRemove,\n    flutterClean,\n    flutterTest,\n    flutterAnalyze,\n    flutterCreate,\n    flutterCreateCodeLytical,\n    flutterBuildApk,\n    flutterBuildIos,\n    flutterBuildAppBundle,\n    podInstall,\n    podInstallWithRepoUpdate,\n    podUpdate,\n    podRepoUpdate,\n    flutterCreateCodeLyticalRiverpod\n  );\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","runTerminalCommand","command","cwd","Promise","resolve","reject","terminal","vscode","window","createTerminal","name","shellPath","show","sendText","disposable","onDidCloseTerminal","closedTerminal","dispose","runTerminalCommandWithTimeout","workspaceFolder","workspace","workspaceFolders","uri","fsPath","flutterPubGet","commands","registerCommand","async","showInformationMessage","error","showErrorMessage","message","flutterPubUpgrade","flutterPubUpgradeMajorVersions","flutterPubOutdated","flutterPubCacheRepair","flutterPubUpgradeDryRun","flutterPubDowngrade","flutterPubVersion","flutterPubAdd","packageName","showInputBox","prompt","placeHolder","flutterPubRemove","flutterClean","flutterTest","flutterAnalyze","flutterCreate","projectName","organization","flutterCreateCodeLytical","projectPath","path","join","forEach","folder","dirPath","fs","mkdirSync","recursive","mainFile","writeFileSync","createProjectFiles","defaultTestFile","existsSync","unlinkSync","sampleControllerTestFile","getSampleControllerTestTemplate","flutterBuildApk","flutterBuildIos","flutterBuildAppBundle","podInstall","iosPath","podfilePath","stat","Uri","file","type","FileType","Directory","podInstallWithRepoUpdate","podUpdate","podRepoUpdate","flutterCreateCodeLyticalRiverpod","createRiverPodProjectFiles","homeViewModelTestFile","getHomeViewModelTestTemplate","replace","txt","charAt","toUpperCase","substr","appRouterFile","homeViewFile","homeViewModelFile","sampleModelFile","appClassName","launcherFile","appFile","providersFile","providersExportFile","sampleControllerFile","welcomeScreenFile","contextHelperFile","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}