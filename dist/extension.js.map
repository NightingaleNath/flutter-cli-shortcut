{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://flutter-cli-shortcut/./src/extension.ts","webpack://flutter-cli-shortcut/external commonjs \"vscode\"","webpack://flutter-cli-shortcut/external node-commonjs \"child_process\"","webpack://flutter-cli-shortcut/external node-commonjs \"path\"","webpack://flutter-cli-shortcut/webpack/bootstrap","webpack://flutter-cli-shortcut/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { exec } from \"child_process\";\nimport * as path from \"path\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  // Helper function to execute terminal commands\n  const runTerminalCommand = (\n    command: string,\n    successMessage: string,\n    cwd: string\n  ) => {\n    exec(command, { cwd }, (err, stdout, stderr) => {\n      if (err) {\n        vscode.window.showErrorMessage(`Error: ${stderr}`);\n        console.error(`Error: ${stderr}`);\n      } else {\n        vscode.window.showInformationMessage(successMessage);\n        console.log(`Output: ${stdout}`);\n      }\n    });\n  };\n\n  // Get the workspace folder (assuming there's only one for simplicity)\n  const workspaceFolder = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n  // Flutter commands\n  let flutterRun = vscode.commands.registerCommand(\n    \"flutter-helper.flutterRun\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      exec(\n        \"flutter devices\",\n        { cwd: workspaceFolder },\n        (err, stdout, stderr) => {\n          if (err) {\n            vscode.window.showErrorMessage(`Error getting devices: ${stderr}`);\n            console.error(`Error: ${stderr}`);\n            return;\n          }\n\n          const devices = stdout\n            .split(\"\\n\")\n            .filter((line) => line.includes(\"•\"))\n            .map((line) => {\n              const match = line.match(/• (.*?) \\[(.*?)\\]/);\n              if (match) {\n                return {\n                  label: match[1], // Device name\n                  id: match[2], // Device ID\n                };\n              }\n              return null;\n            })\n            .filter((device) => device !== null);\n\n          if (devices.length === 0) {\n            vscode.window.showErrorMessage(\n              \"No devices found. Please connect a device or start an emulator.\"\n            );\n            return;\n          }\n\n          vscode.window\n            .showQuickPick(\n              devices.map((device) => device.label),\n              {\n                placeHolder: \"Select a device to run the app on\",\n              }\n            )\n            .then((selectedDevice) => {\n              if (!selectedDevice) {\n                return;\n              }\n\n              const selected = devices.find(\n                (device) => device.label === selectedDevice\n              );\n              if (selected) {\n                vscode.window.showInformationMessage(\n                  `Running on ${selected.label}...`\n                );\n                runTerminalCommand(\n                  `flutter run -d ${selected.id}`,\n                  `Flutter App Running on ${selected.label}!`,\n                  workspaceFolder\n                );\n              }\n            });\n        }\n      );\n    }\n  );\n\n  let flutterPubGet = vscode.commands.registerCommand(\n    \"flutter-helper.flutterPubGet\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"flutter pub get\"...');\n      runTerminalCommand(\n        \"flutter pub get\",\n        \"Flutter Pub Get Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterPubUpgrade = vscode.commands.registerCommand(\n    \"flutter-helper.flutterPubUpgrade\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"flutter pub upgrade\"...');\n      runTerminalCommand(\n        \"flutter pub upgrade\",\n        \"Flutter Pub Upgrade Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterClean = vscode.commands.registerCommand(\n    \"flutter-helper.flutterClean\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"flutter clean\"...');\n      runTerminalCommand(\n        \"flutter clean\",\n        \"Flutter Clean Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterTest = vscode.commands.registerCommand(\n    \"flutter-helper.flutterTest\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"flutter test\"...');\n      runTerminalCommand(\n        \"flutter test\",\n        \"Flutter Test Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterAnalyze = vscode.commands.registerCommand(\n    \"flutter-helper.flutterAnalyze\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"flutter analyze\"...');\n      runTerminalCommand(\n        \"flutter analyze\",\n        \"Flutter Analysis Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterCreate = vscode.commands.registerCommand(\n    \"flutter-helper.flutterCreate\",\n    async () => {\n      const projectName = await vscode.window.showInputBox({\n        prompt: \"Enter the name of the new Flutter project\",\n      });\n\n      if (!projectName) {\n        vscode.window.showErrorMessage(\"Project name is required.\");\n        return;\n      }\n\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage(\n        `Creating project \"${projectName}\"...`\n      );\n      runTerminalCommand(\n        `flutter create ${projectName}`,\n        `Flutter Project \"${projectName}\" Created!`,\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterRunRelease = vscode.commands.registerCommand(\n    \"flutter-helper.flutterRunRelease\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      exec(\n        \"flutter devices\",\n        { cwd: workspaceFolder },\n        (err, stdout, stderr) => {\n          if (err) {\n            vscode.window.showErrorMessage(`Error getting devices: ${stderr}`);\n            console.error(`Error: ${stderr}`);\n            return;\n          }\n\n          const devices = stdout\n            .split(\"\\n\")\n            .filter((line) => line.includes(\"•\"))\n            .map((line) => {\n              const match = line.match(/• (.*?) \\[(.*?)\\]/);\n              if (match) {\n                return {\n                  label: match[1], // Device name\n                  id: match[2], // Device ID\n                };\n              }\n              return null;\n            })\n            .filter((device) => device !== null);\n\n          if (devices.length === 0) {\n            vscode.window.showErrorMessage(\n              \"No devices found. Please connect a device or start an emulator.\"\n            );\n            return;\n          }\n\n          vscode.window\n            .showQuickPick(\n              devices.map((device) => device.label),\n              {\n                placeHolder: \"Select a device to run the app on\",\n              }\n            )\n            .then((selectedDevice) => {\n              if (!selectedDevice) {\n                return;\n              }\n\n              const selected = devices.find(\n                (device) => device.label === selectedDevice\n              );\n              if (selected) {\n                vscode.window.showInformationMessage(\n                  `Running on ${selected.label} in release mode...`\n                );\n                runTerminalCommand(\n                  `flutter run -d ${selected.id} --release`,\n                  `Flutter App Running on ${selected.label} in Release Mode!`,\n                  workspaceFolder\n                );\n              }\n            });\n        }\n      );\n    }\n  );\n\n  let flutterBuildApk = vscode.commands.registerCommand(\n    \"flutter-helper.flutterBuildApk\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage(\"Building APK...\");\n      runTerminalCommand(\n        \"flutter build apk\",\n        \"APK Built Successfully!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterBuildIos = vscode.commands.registerCommand(\n    \"flutter-helper.flutterBuildIos\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage(\"Building iOS app...\");\n      runTerminalCommand(\n        \"flutter build ios\",\n        \"iOS App Built Successfully!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterBuildAppBundle = vscode.commands.registerCommand(\n    \"flutter-helper.flutterBuildAppBundle\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage(\"Building App Bundle...\");\n      runTerminalCommand(\n        \"flutter build appbundle\",\n        \"App Bundle Built Successfully!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let podInstall = vscode.commands.registerCommand(\n    \"flutter-helper.podInstall\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      // Check if ios directory exists\n      try {\n        const stat = await vscode.workspace.fs.stat(vscode.Uri.file(iosPath));\n        if (stat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        vscode.window.showInformationMessage('Running \"pod install\"...');\n        runTerminalCommand(\"pod install\", \"Pod Install Completed!\", iosPath);\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podInstallWithRepoUpdate = vscode.commands.registerCommand(\n    \"flutter-helper.podInstallWithRepoUpdate\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      // Check if ios directory exists\n      try {\n        const stat = await vscode.workspace.fs.stat(vscode.Uri.file(iosPath));\n        if (stat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        vscode.window.showInformationMessage(\n          'Running \"pod install --repo-update\"...'\n        );\n        runTerminalCommand(\n          \"pod install --repo-update\",\n          \"Pod Install with Repo Update Completed!\",\n          iosPath\n        );\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podUpdate = vscode.commands.registerCommand(\n    \"flutter-helper.podUpdate\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const iosPath = path.join(workspaceFolder, \"ios\");\n      // Check if ios directory exists\n      try {\n        const stat = await vscode.workspace.fs.stat(vscode.Uri.file(iosPath));\n        if (stat.type !== vscode.FileType.Directory) {\n          vscode.window.showErrorMessage(\n            \"No ios directory found. Please check your Flutter project.\"\n          );\n          return;\n        }\n\n        vscode.window.showInformationMessage('Running \"pod update\"...');\n        runTerminalCommand(\"pod update\", \"Pod Update Completed!\", iosPath);\n      } catch {\n        vscode.window.showErrorMessage(\n          \"No ios directory found. Please check your Flutter project.\"\n        );\n      }\n    }\n  );\n\n  let podRepoUpdate = vscode.commands.registerCommand(\n    \"flutter-helper.podRepoUpdate\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage('Running \"pod repo update\"...');\n      runTerminalCommand(\n        \"pod repo update\",\n        \"Pod Repo Update Completed!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterPubGlobalActivate = vscode.commands.registerCommand(\n    \"flutter-helper.flutterPubGlobalActivate\",\n    async () => {\n      const packageName = await vscode.window.showInputBox({\n        prompt: \"Enter the name of the package to activate globally\",\n      });\n\n      if (!packageName) {\n        vscode.window.showErrorMessage(\"Package name is required.\");\n        return;\n      }\n\n      vscode.window.showInformationMessage(\n        `Activating package \"${packageName}\" globally...`\n      );\n      runTerminalCommand(\n        `flutter pub global activate ${packageName}`,\n        `Package \"${packageName}\" Activated Globally!`,\n        workspaceFolder!\n      );\n    }\n  );\n\n  let flutterChannel = vscode.commands.registerCommand(\n    \"flutter-helper.flutterChannel\",\n    async () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      const channel = await vscode.window.showQuickPick(\n        [\"stable\", \"beta\", \"dev\", \"master\"],\n        {\n          placeHolder: \"Select a Flutter channel to switch to\",\n        }\n      );\n\n      if (!channel) {\n        return;\n      }\n\n      vscode.window.showInformationMessage(\n        `Switching to \"${channel}\" channel...`\n      );\n      runTerminalCommand(\n        `flutter channel ${channel}`,\n        `Switched to \"${channel}\" channel!`,\n        workspaceFolder\n      );\n    }\n  );\n\n  let flutterVersion = vscode.commands.registerCommand(\n    \"flutter-helper.flutterVersion\",\n    () => {\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage(\n          \"No workspace folder found. Please open a Flutter project folder.\"\n        );\n        return;\n      }\n\n      vscode.window.showInformationMessage(\n        \"Getting current Flutter version...\"\n      );\n      runTerminalCommand(\n        \"flutter --version\",\n        \"Flutter Version Retrieved!\",\n        workspaceFolder\n      );\n    }\n  );\n\n  // Add all commands to the context\n  context.subscriptions.push(\n    flutterRun,\n    flutterPubGet,\n    flutterPubUpgrade,\n    flutterClean,\n    flutterTest,\n    flutterAnalyze,\n    flutterCreate,\n    flutterRunRelease,\n    flutterBuildApk,\n    flutterBuildIos,\n    flutterBuildAppBundle,\n    podInstall,\n    podInstallWithRepoUpdate,\n    podUpdate,\n    podRepoUpdate,\n    flutterPubGlobalActivate,\n    flutterChannel,\n    flutterVersion\n  );\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","runTerminalCommand","command","successMessage","cwd","exec","err","stdout","stderr","vscode","window","showErrorMessage","console","error","showInformationMessage","log","workspaceFolder","workspace","workspaceFolders","uri","fsPath","flutterRun","commands","registerCommand","devices","split","filter","line","includes","map","match","label","id","device","length","showQuickPick","placeHolder","then","selectedDevice","selected","find","flutterPubGet","flutterPubUpgrade","flutterClean","flutterTest","flutterAnalyze","flutterCreate","async","projectName","showInputBox","prompt","flutterRunRelease","flutterBuildApk","flutterBuildIos","flutterBuildAppBundle","podInstall","iosPath","path","join","fs","stat","Uri","file","type","FileType","Directory","podInstallWithRepoUpdate","podUpdate","podRepoUpdate","flutterPubGlobalActivate","packageName","flutterChannel","channel","flutterVersion","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}